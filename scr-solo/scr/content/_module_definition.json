{
  "scope": "PUBLIC",
  "source": "package hello  / inline;\n\n    dcl package logger logr_perf('App.tk.SID.Perf');\n        dcl double timer_start;\n        dcl double elapsed_time;\n        dcl double total_timer_start;\n        dcl double total_elapsed_time;\n        dcl package logger logr_error('App.tk.SID.Error');\n\n    dcl package \"hello_hello_1_0\" \"hello_hello_1_0_hdl\"();\n\n     method init();\n\n     end;\n\n    method execute_internal(\n       varchar(64) \"name\"\n      ,in_out varchar \"text\"\n\n      ,in_out integer \"_filter_\"\n\n    );\n        dcl integer dg_filter_;\n\n       dcl integer _sidLogStatus;\n           dcl varchar(3000) _sidLogErrorMsg;\n\ntotal_timer_start = datetime();\n\n        timer_start = datetime();\n        \"hello_hello_1_0_hdl\".execute(\"name\", \"text\");\n\n        elapsed_time = datetime() - timer_start;\n        logr_perf.log( 'd', 'Package Name: hello, Node Name: hello, Node ID: a4a8b7ca-0cd7-4d39-9d6e-db8fda18c246, NODE DURATION: ' .. elapsed_time);\n\n        \"end\":/*label for decision node link to flow end*/\n\ntotal_elapsed_time = datetime() - total_timer_start;\nlogr_perf.log( 'd', 'Package Name: hello, TOTAL DURATION: ' .. total_elapsed_time);\n\n     end;\n\n    method execute(\n       varchar(64) \"name_\"\n      ,in_out varchar \"text\"\n);\n\n      dcl integer _filter_;\n\n      execute_internal(\n          \"name_\"\n         ,\"text\"\n      ,\"_filter_\"\n      );\n\n    end;\n\n      endpackage;",
  "submodules": [
    {
      "name": "hello_hello_1_0",
      "source": "  package \"hello_hello_1_0\"  / inline;\n\n      dcl package logger _logger('App.SASDCM');\n      dcl package logger logr_variableTrace('App.TableServices.DS2.Runtime.TraceVariables');\n\n            method setruleFiredBasePosition(integer newBasePosition); end;\n            method setDecisionNodeID(varchar newDecisonNodeID); end;\n            method enableRuleFiredRecording(); end;\n            method disableRuleFiredRecording(); end;\n            method initRuleFireHashes(); end;\n            method getRuleFiredFlagCount() returns integer;  return 0; end;\n            method recordRuleFired(\n              in_out char    ruleFiredFlags,\n              in_out integer rulesFiredForRecordCount,\n              char(36)       this_rule_id);\n            end;\n\n        method initRdsp();\n    end;\n\n    method execute( in_out varchar \"name\",in_out varchar \"text\");\n\n         text = 'Hello ' ||  name;\n\n      rule_end:  /* label for rule RETURN action */\n    end;\n\n  endpackage;",
      "language": "DS2"
    }
  ]
}