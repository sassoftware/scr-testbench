{
  "scope": "PUBLIC",
  "source": "package sample_oracle  / inline;\n\n    dcl package logger logr_perf('App.tk.SID.Perf');\n        dcl double timer_start;\n        dcl double elapsed_time;\n        dcl double total_timer_start;\n        dcl double total_elapsed_time;\n        dcl package logger logr_error('App.tk.SID.Error');\n\n    dcl package \"sampleu45oracle_oracle_select_1_0\" \"sampleu45oracle_oracle_select_1_0_hdl\"();\n\n     method init();\n\n     end;\n\n    method execute_internal(\n       in_out varchar \"NAME\"\n      ,in_out double \"HEIGHT\"\n      ,in_out double \"returnCode\"\n      ,in_out double \"rowCount\"\n\n      ,in_out integer \"_filter_\"\n\n    );\n        dcl integer dg_filter_;\n\n       dcl integer _sidLogStatus;\n           dcl varchar(3000) _sidLogErrorMsg;\n\ntotal_timer_start = datetime();\n\n        timer_start = datetime();\n        \"sampleu45oracle_oracle_select_1_0_hdl\".execute(\"NAME\", \"HEIGHT\", \"rowCount\", \"returnCode\");\n\n        elapsed_time = datetime() - timer_start;\n        logr_perf.log( 'd', 'Package Name: sample_oracle, Node Name: oracle_select, Node ID: a7068d01-a7ba-483a-8b2c-ef93cc995961, NODE DURATION: ' .. elapsed_time);\n\n        \"end\":/*label for decision node link to flow end*/\n\ntotal_elapsed_time = datetime() - total_timer_start;\nlogr_perf.log( 'd', 'Package Name: sample_oracle, TOTAL DURATION: ' .. total_elapsed_time);\n\n     end;\n\n    method execute(\n       varchar(32) \"NAME_\"\n      ,in_out double \"HEIGHT\"\n      ,in_out varchar \"NAME\"\n      ,in_out double \"returnCode\"\n      ,in_out double \"rowCount\"\n);\n\n      dcl integer _filter_;\n\n      \"NAME\" = \"NAME_\";\n\n      execute_internal(\n          \"NAME\"\n         ,\"HEIGHT\"\n         ,\"returnCode\"\n         ,\"rowCount\"\n      ,\"_filter_\"\n      );\n\n    end;\n\n      endpackage;",
  "submodules": [
    {
      "name": "sampleu45oracle_oracle_select_1_0",
      "source": "package \"sampleu45oracle_oracle_select_1_0\" /inline;\n    dcl integer \"_rc\";\n    dcl package sqlstmt _stmt;\n\n    method execute(\n            in_out varchar \"NAME\", \n\n            in_out double \"HEIGHT\", \n\n            in_out double \"rowCount\", \n\n            in_out double \"returnCode\"\n\n    );\n\n        if missing(_stmt) then _stmt = _new_ sqlstmt('  SELECT HEIGHT AS HEIGHT FROM CLASS WHERE NAME = ?  ');\n\n        _stmt.setVarchar(1, \"NAME\");\n\n        \"_rc\" = _stmt.execute();\n        if (\"_rc\" = 1) then do;\n            _stmt = _new_ sqlstmt('  SELECT HEIGHT AS HEIGHT FROM CLASS WHERE NAME = ?  ');\n\n            _stmt.setVarchar(1, \"NAME\");\n\n            \"_rc\" = _stmt.execute();\n        end;\n\n        \"returnCode\" = \"_rc\";\n        if (\"_rc\") then do;\n            put 'ERROR: Error executing';\n            return;\n        end;\n\n        \"_rc\" = _stmt.fetch();\n        if(\"_rc\" = 0) then do;\n                \"HEIGHT\" =  _stmt.getDouble(1);\n\n                \"rowCount\" = 1;\n                \"_rc\" = _stmt.closeResults();\n                if (\"_rc\") then do;\n                    put 'ERROR: Error closing results';\n                    return;\n                end;\n\n        end;\n    end;\nendpackage;",
      "language": "DS2"
    }
  ]
}